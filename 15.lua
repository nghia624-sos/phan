local encoded = [[
-- ===CBwLkNoYXJhY3RlciBhbmQgcC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBhbmQgcC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikgdGhlbg0KCQkJCQkJCWxvY2FsIGRpc3QgPSAoSFJQLlBvc2l0aW9uIC0gcC5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbikuTWFnbml0dWRlDQoJCQkJCQkJaWYgZGlzdCA8IHNob3J0ZXN0IGFuZCBwLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggPiAwIHRoZW4NCgkJCQkJCQkJc2hvcnRlc3QgPSBkaXN0DQoJCQkJCQkJCW5lYXJlc3QgPSBwLkNoYXJhY3Rlcg0KCQkJCQkJCWVuZA0KCQkJCQkJZW5kDQoJCQkJCWVuZA0KDQoJCQkJCWlmIG5lYXJlc3QgdGhlbg0KCQkJCQkJSFJQLkNGcmFtZSA9IENGcmFtZS5uZXcoSFJQLlBvc2l0aW9uLCBuZWFyZXN0Lkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24pDQoJCQkJCWVuZA0KCQkJCQl3YWl0KDAuMTUpDQoJCQkJZW5kDQoJCQllbmQpDQoJCWVuZA0KCWVuZCwNCn0pDQoNCi0tIFNpbGVudCBBaW0NClB2UFRhYjpDcmVhdGVUb2dnbGUoew0KCU5hbWUgPSAi8J+Vtu+4jyBTaWxlbnQgQWltIChHaeG6oyBs4bqtcCBi4bqvbikiLA0KCURlZmF1bHQgPSBmYWxzZSwNCglDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQ0KCQlzaWxlbnRFbmFibGVkID0gVmFsdWUNCgkJaWYgVmFsdWUgdGhlbg0KCQkJc3Bhd24oZnVuY3Rpb24oKQ0KCQkJCXdoaWxlIHNpbGVudEVuYWJsZWQgZG8NCgkJCQkJbG9jYWwgbmVhcmVzdCA9IG5pbA0KCQkJCQlsb2NhbCBzaG9ydGVzdCA9IG1hdGguaHVnZQ0KCQkJCQlmb3IgXywgcCBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8NCgkJCQkJCWlmIHAgfj0gTG9jYWxQbGF5ZXIgYW5kIHAuQ2hhcmFjdGVyIGFuZCBwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIGFuZCBwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSB0aGVuDQoJCQkJCQkJbG9jYWwgZGlzdCA9IChIUlAuUG9zaXRpb24gLSBwLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uKS5NYWduaXR1ZGUNCgkJCQkJCQlpZiBkaXN0IDwgc2hvcnRlc3QgYW5kIHAuQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aCA+IDAgdGhlbg0KCQkJCQkJCQlzaG9ydGVzdCA9IGRpc3QNCgkJCQkJCQkJbmVhcmVzdCA9IHAuQ2hhcmFjdGVyDQoJCQkJCQkJZW5kDQoJCQkJCQllbmQNCgkJCQkJZW5kDQoNCgkJCQkJaWYgbmVhcmVzdCB0aGVuDQoJCQkJCQltb3VzZTFjbGljaygpDQoJCQkJCWVuZA0KCQkJCQl3YWl0KDAuMjUpDQoJCQkJZW5kDQoJCQllbmQpDQoJCWVuZA0KCWVuZCwNCn0pDQoNCi0tIEhpdGJveCArIExpbmUNClB2UFRhYjpDcmVhdGVUb2dnbGUoew0KCU5hbWUgPSAi8J+TjyBIaXRib3ggKyBMaW5lIMSR4bq/biBuZ8aw4budaSBjaMahaSIsDQoJRGVmYXVsdCA9IGZhbHNlLA0KCUNhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpDQoJCWhpdGJveEVuYWJsZWQgPSBWYWx1ZQ0KCQlpZiBWYWx1ZSB0aGVuDQoJCQktLSBH4bqvbiBoaXRib3ggY2hvIHThuqV0IGPhuqMgbmfGsOG7nWkgY2jGoWkgbGnDqm4gdOG7pWMNCgkJCXNwYXduKGZ1bmN0aW9uKCkNCgkJCQl3aGlsZSBoaXRib3hFbmFibGVkIGRvDQoJCQkJCWZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvDQoJCQkJCQlpZiBwbGF5ZXIgfj0gTG9jYWxQbGF5ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuDQoJCQkJCQkJbG9jYWwgcGFydCA9IHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydA0KCQkJCQkJCWlmIG5vdCBwYXJ0OkZpbmRGaXJzdENoaWxkKCJIaXRib3giKSB0aGVuDQoJCQkJCQkJCWxvY2FsIGFkb3JuID0gSW5zdGFuY2UubmV3KCJCb3hIYW5kbGVBZG9ybm1lbnQiKQ0KCQkJCQkJCQlhZG9ybi5TaXplID0gcGFydC5TaXplICsgVmVjdG9yMy5uZXcoMiwyLDIpDQoJCQkJCQkJCWFkb3JuLkNvbG9yMyA9IENvbG9yMy5uZXcoMSwwLDApDQoJCQkJCQkJCWFkb3JuLkFkb3JuZWUgPSBwYXJ0DQoJCQkJCQkJCWFkb3JuLkFsd2F5c09uVG9wID0gdHJ1ZQ0KCQkJCQkJCQlhZG9ybi5aSW5kZXggPSAxMA0KCQkJCQkJCQlhZG9ybi5OYW1lID0gIkhpdGJveCINCgkJCQkJCQkJYWRvcm4uUGFyZW50ID0gcGFydA0KCQkJCQkJCWVuZA0KDQoJCQkJCQkJaWYgbm90IHBhcnQ6RmluZEZpcnN0Q2hpbGQoIlRhcmdldExpbmUiKSB0aGVuDQoJCQkJCQkJCWxvY2FsIGJlYW0gPSBJbnN0YW5jZS5uZXcoIkJlYW0iKQ0KCQkJCQkJCQlsb2NhbCBhMCA9IEhSUDpGaW5kRmlyc3RDaGlsZCgiSFJQX0F0dGFjaCIpIG9yIEluc3RhbmNlLm5ldygiQXR0YWNobWVudCIsIEhSUCkNCgkJCQkJCQkJYTAuTmFtZSA9ICJIUlBfQXR0YWNoIg0KCQkJCQkJCQlsb2NhbCBhMSA9IEluc3RhbmNlLm5ldygiQXR0YWNobWVudCIsIHBhcnQpDQoNCgkJCQkJCQkJYmVhbS5BdHRhY2htZW50MCA9IGEwDQoJCQkJCQkJCWJlYW0uQXR0YWNobWVudDEgPSBhMQ0KCQkJCQkJCQliZWFtLldpZHRoMCA9IDAuMQ0KCQkJCQkJCQliZWFtLldpZHRoMSA9IDAuMQ0KCQkJCQkJCQliZWFtLkNvbG9yID0gQ29sb3JTZXF1ZW5jZS5uZXcoQ29sb3IzLm5ldygxLDAsMCkpDQoJCQkJCQkJCWJlYW0uRmFjZUNhbWVyYSA9IHRydWUNCgkJCQkJCQkJYmVhbS5OYW1lID0gIlRhcmdldExpbmUiDQoJCQkJCQkJCWJlYW0uUGFyZW50ID0gcGFydA0KCQkJCQkJCWVuZA0KCQkJCQkJZW5kDQoJCQkJCWVuZA0KCQkJCQl3YWl0KDEpDQoJCQkJZW5kDQoJCQllbmQpDQoJCWVsc2UNCgkJCWZvciBfLCBwIGluIHBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbw0KCQkJCWlmIHAgfj0gTG9jYWxQbGF5ZXIgYW5kIHAuQ2hhcmFjdGVyIHRoZW4NCgkJCQkJZm9yIF8sIHYgaW4gcGFpcnMocC5DaGFyYWN0ZXI6R2V0RGVzY2VuZGFudHMoKSkgZG8NCgkJCQkJCWlmIHY6SXNBKCJCb3hIYW5kbGVBZG9ybm1lbnQiKSBhbmQgdi5OYW1lID09ICJIaXRib3giIHRoZW4gdjpEZXN0cm95KCkgZW5kDQoJCQkJCQlpZiB2OklzQSgiQmVhbSIpIGFuZCB2Lk5hbWUgPT0gIlRhcmdldExpbmUiIHRoZW4gdjpEZXN0cm95KCkgZW5kDQoJCQkJCQlpZiB2OklzQSgiQXR0YWNobWVudCIpIGFuZCB2Lk5hbWUgPT0gIkhSUF9BdHRhY2giIHRoZW4gdjpEZXN0cm95KCkgZW5kDQoJCQkJCWVuZA0KCQkJCWVuZA0KCQkJZW5kDQoJCWVuZA0KCWVuZCwNCn0pDQo=
==]]

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local function decode(data)
	data = string.gsub(data, '[^'..b..'=]', '')
	return (data:gsub('.', function(x)
		if (x == '=') then return '' end
		local r,f='',(b:find(x)-1)
		for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
		return r
	end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
		if #x ~= 8 then return '' end
		local c=0
		for i=1,8 do
			c = c + (x:sub(i,i)=='1' and 2^(8-i) or 0)
		end
		return string.char(c)
	end))
end

-- ⚠️ CHẠY SCRIPT
local decoded = decode(encoded)

-- Chỉ chạy được trong Exploit như KRNL, Synapse
local f = loadstring(decoded)
if f then
	f()
end